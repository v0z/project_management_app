name: FastAPI CI with Poetry and Linting

on:
  push:
    branches: ["main"]  # Trigger on push to main
  pull_request:
    branches: ["main"]  # Trigger on PRs targeting main
  schedule:
    - cron: '0 0 * * 1'  # Weekly scheduled run every Monday at midnight

permissions:
  contents: read

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true  # Store virtualenv inside project dir (.venv)
  TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
  PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache dependencies
        uses: actions/cache@v4  # Cache Poetry environment to speed up workflow runs
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}
          restore-keys: |
            poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: poetry install --no-root --with dev --no-interaction --sync

      - name: Fix import sorting with isort
        run: poetry run isort . --profile black

      - name: Lint and fix issues with Ruff
        run: |
          poetry run ruff check app/ tests/ --fix --output-format=github

      - name: Check code formatting with Black
        run: poetry run black .
      - name: Run security scan with Bandit
        run: poetry run bandit -r app
#       - name: Static typing with mypy
#         run: poetry run mypy app/ tests/

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]  # Test against current and newest Python versions
      fail-fast: false  # Don't stop early if one job fails
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run tests
        run: poetry run pytest tests/

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --only dev --no-interaction --sync

      - name: Check outdated dependencies
        run: poetry show --outdated  # List outdated dependencies weekly

  build-and-push-to-dockerhub:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality, dependency-check]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi_poetry_crud:latest

