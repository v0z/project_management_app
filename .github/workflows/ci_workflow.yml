name: FastAPI CI with Poetry and Linting

on:
  push:
    branches: ["main"]  # Trigger workflow on push to main branch
  pull_request:
    branches: ["main"]  # Trigger workflow on PRs targeting main branch
  schedule:
    - cron: '0 0 * * 1'  # Weekly scheduled run every Monday at midnight

permissions:
  contents: read

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true  # Store virtualenv inside project dir (.venv)

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache dependencies
        uses: actions/cache@v4  # Cache Poetry environment to speed up workflow runs
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}
          restore-keys: |
            poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: poetry install --no-root --with dev --no-interaction --sync


      - name: Lint and fix issues with Ruff
        run: |
          poetry run ruff check app/ tests/ --fix --output-format=github

#       - name: Static typing with mypy
#         run: poetry run mypy app/ tests/

#      - name: Run security scan with Bandit
#        run: poetry run bandit -r app

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]  # Test against multiple Python versions
      fail-fast: false  # Don't stop early if one job fails
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}-fix-1 # Add a new suffix to force a cache miss
          restore-keys: |
            poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest tests/

#  dependency-check:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.12"
#
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#
#      - name: Install dependencies
#        run: poetry install --only dev --no-interaction --sync
#
#      - name: Check outdated dependencies
#        run: poetry show --outdated  # List outdated dependencies weekly
